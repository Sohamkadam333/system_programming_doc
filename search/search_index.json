{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Win32 APIs","text":""},{"location":"#01-create-directory","title":"01 Create Directory","text":"<pre><code>#include&lt;windows.h&gt;\n#include&lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    BOOL bDir = CreateDirectory(L\"D:\\\\hello\",NULL);\n\n    if(bDir == FALSE)\n    {\n        cout&lt;&lt;\"Create Directory Failed, Error No = \"&lt;&lt;GetLastError()&lt;&lt;endl;\n        system(\"PAUSE\");\n        return 1;\n    }\n\n    cout&lt;&lt;\"Create Directory Success\"&lt;&lt;endl;\n    system(\"PAUSE\");\n        return 0;\n}\n</code></pre>"},{"location":"#02-remove-directory","title":"02 Remove Directory","text":"<pre><code>#include &lt;windows.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n  BOOL bDir;\n\n  bDir = RemoveDirectory(L\"D:\\\\hello\");\n\n  if (bDir == FALSE)\n  {\n    cerr &lt;&lt; \"Error Deleting Directory, Error No = \" &lt;&lt; GetLastError() &lt;&lt; endl;\n    system(\"PAUSE\");\n    return 0;\n  }\n\n  cout &lt;&lt; \"Directory Deleted Successfully\" &lt;&lt; endl;\n  system(\"PAUSE\");\n\n  return 0;\n}\n</code></pre>"},{"location":"#03-copy-file","title":"03 Copy File","text":"<pre><code>#include &lt;windows.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n  BOOL bDir = CopyFile(L\"D:\\\\person3.csv\", L\"D:\\\\hello\\\\person3.csv\", TRUE);\n\n  if (bDir == FALSE)\n  {\n    cerr &lt;&lt; \"Copy File Failed, Error No = \" &lt;&lt; GetLastError() &lt;&lt; endl;\n    system(\"PAUSE\");\n    return 1;\n  }\n\n  cerr &lt;&lt; \"Copy File Success\" &lt;&lt; endl;\n  system(\"PAUSE\");\n  return 0;\n}\n</code></pre>"},{"location":"#04-move-file","title":"04 Move File","text":"<pre><code>#include &lt;windows.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n  BOOL bDir = MoveFile(L\"D:\\Soham's Notebook.url.csv\", L\"D:\\\\hello\\\\Soham's Notebook.url.csv\");\n\n  if (bDir == FALSE)\n  {\n    cerr &lt;&lt; \"Move File Failed, Error No = \" &lt;&lt; GetLastError() &lt;&lt; endl;\n    system(\"PAUSE\");\n    return 1;\n  }\n\n  cout &lt;&lt; \"Move File Success\" &lt;&lt; endl;\n  system(\"PAUSE\");\n  return 0;\n}\n</code></pre>"},{"location":"#05-create-file","title":"05 Create File","text":"<pre><code>#include &lt;windows.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n  HANDLE hFile = CreateFile(L\"D:\\\\hello\\\\demo.txt\", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ, NULL, CREATE_NEW, FILE_ATTRIBUTE_NORMAL, NULL);\n\n  if (hFile == INVALID_HANDLE_VALUE)\n  {\n    cerr &lt;&lt; \"Create File Failed, Error No = \" &lt;&lt; GetLastError() &lt;&lt; endl;\n    system(\"PAUSE\");\n    return 1;\n  }\n  cout &lt;&lt; \"Create File Success\" &lt;&lt; endl;\n  system(\"PAUSE\");\n  return 0;\n}\n</code></pre>"},{"location":"#06-write-file","title":"06 Write File","text":"<pre><code>#include &lt;windows.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n  HANDLE hFile = CreateFile(L\"D:\\\\hello\\\\demo.txt\", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ, NULL, CREATE_NEW, FILE_ATTRIBUTE_NORMAL, NULL);\n\n  if (hFile == INVALID_HANDLE_VALUE)\n  {\n    cerr &lt;&lt; \"Create File Failed, Error No = \" &lt;&lt; GetLastError() &lt;&lt; endl;\n    system(\"PAUSE\");\n    return 1;\n  }\n  cout &lt;&lt; \"Create File Success\" &lt;&lt; endl;\n  system(\"PAUSE\");\n\n  char chBuffer[] = \"this is a demo file\";\n  DWORD dwNoByteToWirte = strlen(chBuffer);\n  DWORD dwNoByteWritten = 0;\n\n  BOOL bFile = WriteFile(hFile, chBuffer, dwNoByteToWirte, &amp;dwNoByteWritten, NULL);\n\n  if (bFile == FALSE)\n  {\n    cerr &lt;&lt; \"Error Writing data into file, Error No = \" &lt;&lt; GetLastError() &lt;&lt; endl;\n    system(\"PAUSE\");\n    return 1;\n  }\n\n  cerr &lt;&lt; \"Success Writing data into file\" &lt;&lt; endl;\n  system(\"PAUSE\");\n\n  return 0;\n}\n</code></pre>"},{"location":"#07-create-hard-link","title":"07 Create Hard Link","text":"<pre><code>#include &lt;windows.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n  BOOL bHfile = CreateHardLink(L\"D:\\\\hello\\\\person4.csv\", L\"D:\\\\hello\\\\person3.csv\", NULL);\n\n  if (bHfile == FALSE)\n  {\n    cerr &lt;&lt; \"Create Hard Link failed, Erro No = \" &lt;&lt; GetLastError() &lt;&lt; endl;\n    system(\"PAUSE\");\n    return 1;\n  }\n\n  cout &lt;&lt; \"Create Hard Link Success\" &lt;&lt; endl;\n  system(\"PAUSE\");\n  return 0;\n}\n</code></pre>"},{"location":"#08-create-soft-link","title":"08 Create Soft Link","text":"<pre><code>#include &lt;windows.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n  BOOL bHfile = CreateSymbolicLink(L\"D:\\\\hello\\\\person3-shortcut.csv\", L\"D:\\\\hello\\\\person3.csv\", 0);\n\n  if (bHfile == FALSE)\n  {\n    cerr &lt;&lt; \"Create Soft Link failed, Erro No = \" &lt;&lt; GetLastError() &lt;&lt; endl;\n    system(\"PAUSE\");\n    return 1;\n  }\n\n  cout &lt;&lt; \"Create Soft Link Success\" &lt;&lt; endl;\n  system(\"PAUSE\");\n  return 0;\n}\n</code></pre>"},{"location":"#09-reg-create-key","title":"09 Reg Create Key","text":"<pre><code>#include &lt;windows.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n  HKEY hKey;\n  LONG lReg = RegCreateKeyEx(HKEY_LOCAL_MACHINE, L\"Software\\\\Test\\\\Product\\\\SmartId\", 0, NULL, REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS | KEY_WOW64_64KEY, NULL, &amp;hKey, NULL);\n\n  if (lReg != ERROR_SUCCESS)\n  {\n    cerr &lt;&lt; \"Registry Creation failed, Erro No = \" &lt;&lt; GetLastError() &lt;&lt; endl;\n    system(\"PAUSE\");\n    return 1;\n  }\n\n  cout &lt;&lt; \"Registry Creation Success\" &lt;&lt; endl;\n  RegCloseKey(hKey);\n  system(\"PAUSE\");\n  return 0;\n}\n</code></pre>"},{"location":"#10-reg-set-value","title":"10 Reg Set Value","text":"<pre><code>#include &lt;windows.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\n  HKEY hKey;\n  DWORD dwData = 1234;\n  LONG lReg = RegCreateKeyEx(HKEY_LOCAL_MACHINE, L\"Software\\\\Test\\\\Product\\\\SmartId\", 0, NULL, REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS | KEY_WOW64_64KEY, NULL, &amp;hKey, NULL);\n\n  if (lReg != ERROR_SUCCESS)\n  {\n    cerr &lt;&lt; \"Registry Creation failed, Erro No = \" &lt;&lt; GetLastError() &lt;&lt; endl;\n    system(\"PAUSE\");\n    return 1;\n  }\n\n  cout &lt;&lt; \"Registry Creation Success\" &lt;&lt; endl;\n\n  lReg = RegSetValueEx(hKey, L\"Value\", NULL, REG_DWORD, (LPBYTE)&amp;dwData, sizeof(dwData));\n\n  if (lReg != ERROR_SUCCESS)\n  {\n    cerr &lt;&lt; \"Error Setting data in Registry, Error No = \" &lt;&lt; GetLastError() &lt;&lt; endl;\n    system(\"PAUSE\");\n    return 1;\n  }\n\n  cout &lt;&lt; \"Registry Set Value success \" &lt;&lt; endl;\n\n  RegCloseKey(hKey);\n\n  cout &lt;&lt; \"Registry Close success \" &lt;&lt; endl;\n  system(\"PAUSE\");\n  return 0;\n}\n</code></pre>"},{"location":"#11-create-process","title":"11 Create Process","text":"<pre><code>#include&lt;iostream&gt;\n#include&lt;windows.h&gt;\nusing namespace std;\n\nint main()\n{\n    HANDLE hProcess = NULL;\n    HANDLE hThread = NULL;\n    STARTUPINFO si;\n    PROCESS_INFORMATION pi;\n    DWORD dwProcessId = 0;\n    DWORD dwThreadId = 0;\n    ZeroMemory(&amp;si,sizeof(si));\n    ZeroMemory(&amp;pi,sizeof(pi));\n\n    BOOL bCreateProcess = NULL;\n    bCreateProcess = CreateProcess(L\"C:\\\\Program Files\\\\Notepad++\\\\notepad++.exe\",NULL,NULL,NULL,FALSE,0,NULL,NULL,&amp;si,&amp;pi);\n\n    if(bCreateProcess == FALSE)\n    {\n        cerr&lt;&lt;\"Create Process Failed - \"&lt;&lt;GetLastError()&lt;&lt;endl;\n    }\n    else\n    {\n        cout&lt;&lt;\"Create Process Success\"&lt;&lt;endl;\n        cout&lt;&lt;\"ProcessID = \"&lt;&lt;pi.dwProcessId&lt;&lt;endl;\n        cout&lt;&lt;\"ThreadID = \"&lt;&lt;pi.dwThreadId&lt;&lt;endl;\n        cout&lt;&lt;\"Get ProcessID = \"&lt;&lt;GetProcessId(pi.hProcess)&lt;&lt;endl;\n        cout&lt;&lt;\"Get ThreadID = \"&lt;&lt;GetThreadId(pi.hThread)&lt;&lt;endl;\n\n        WaitForSingleObject(pi.hProcess,INFINITE);\n        CloseHandle(hProcess);\n        CloseHandle(hThread);\n    }\n\n    system(\"PAUSE\");\n}\n</code></pre>"},{"location":"#12-create-thread","title":"12 Create Thread","text":"<pre><code>#include&lt;windows.h&gt;\n#include&lt;iostream&gt;\nusing namespace std;\n\nDWORD WINAPI ThreadFun(LPVOID lparam);\n\nint main()\n{\n    HANDLE hThread = NULL;\n    DWORD dwThreadID = NULL;\n\n    hThread = CreateThread(\n        NULL,\n        0,\n        ThreadFun,\n        NULL,\n        0,\n        &amp;dwThreadID);\n\n    if(hThread == NULL)\n    {\n        cout&lt;&lt;\"Thread Creation Failed, Error = \"&lt;&lt;GetLastError()&lt;&lt;endl;\n        system(\"PAUSE\");\n        return 0;\n    }\n\n    cout&lt;&lt;\"Thread Creation Success\"&lt;&lt;endl;\n    cout&lt;&lt;\"ThreadID = \"&lt;&lt;dwThreadID&lt;&lt;endl;\n    CloseHandle(hThread);\n    system(\"PAUSE\");\n\n}\n\nDWORD WINAPI ThreadFun(LPVOID lparam)\n{\n    cout&lt;&lt;\"Thread Fun Running \";\n    Sleep(5000);\n    return 0;\n}\n</code></pre>"},{"location":"#code-screenshot","title":"Code Screenshot","text":""},{"location":"#13-addition-using-thread","title":"13 Addition Using Thread","text":"<pre><code>#include&lt;iostream&gt;\n#include&lt;windows.h&gt;\nusing namespace std;\n\nint a[2];\nDWORD WINAPI ThreadFun(LPVOID lParam);\n\nint main()\n{\n  DWORD dwThreadID = NULL;\n  cout&lt;&lt;\"Enter 1 num : \"&lt;&lt;endl;\n  cin&gt;&gt;a[0];\n  cout&lt;&lt;\"Enter 2 num : \"&lt;&lt;endl;\n  cin&gt;&gt;a[1];\n  cout&lt;&lt;\"Thread Created\";\n\n  HANDLE hThread = CreateThread(\n    NULL,\n    0,\n    ThreadFun,\n    (void*)&amp;a,\n    0,\n    &amp;dwThreadID);\n\n  CloseHandle(hThread);\n  cout&lt;&lt;\"Thread Closed\"&lt;&lt;endl;\n  system(\"PAUSE\");\n}\n\nDWORD WINAPI ThreadFun(LPVOID lParam)\n{\n  cout&lt;&lt;\"Result = \"&lt;&lt;a[0]+a[1]&lt;&lt;endl;\n  return 0;\n}\n</code></pre>"},{"location":"#output-screenshot","title":"Output Screenshot","text":""},{"location":"#14-unnamed-mutex","title":"14 UnNamed Mutex","text":"<pre><code>// UnNamed Mutex\n#include&lt;iostream&gt;\n#include&lt;windows.h&gt;\nusing namespace std;\n\nint main()\n{\n  HANDLE hMutex = NULL;\n  hMutex = CreateMutex(NULL,FALSE,NULL);\n\n  if(hMutex = NULL)\n  {\n    cerr&lt;&lt;\"Error Creating Mutex, Error No : \"&lt;&lt;GetLastError()&lt;&lt;endl;\n    system(\"PAUSE\");\n    return 0;\n  }\n\n  cout&lt;&lt;\"Mutex Creation Success\"&lt;&lt;endl;\n  CloseHandle(hMutex);\n  system(\"PAUSE\");\n  return 0;\n}\n</code></pre>"},{"location":"#output-screenshot_1","title":"Output Screenshot","text":""},{"location":"#15-named-mutex","title":"15 Named Mutex","text":"<pre><code>#include&lt;iostream&gt;\n#include&lt;windows.h&gt;\nusing namespace std;\n\nint main()\n{\n  HANDLE hMutex = NULL;\n  cout&lt;&lt;\"MyMutex\"&lt;&lt;endl;\n  hMutex = CreateMutex(NULL,FALSE,L\"MyMutex\");\n\n  if(hMutex = NULL)\n  {\n    cerr&lt;&lt;\"Error Creating Mutex, Error No : \"&lt;&lt;GetLastError()&lt;&lt;endl;\n    system(\"PAUSE\");\n    return 0;\n  }\n\n  cout&lt;&lt;\"Mutex Creation Success\"&lt;&lt;endl;\n  //CloseHandle(hMutex);\n  system(\"PAUSE\");\n  return 0;\n}\n</code></pre>"},{"location":"#output-screenshot_2","title":"Output Screenshot","text":""},{"location":"#16-open-mutex","title":"16 Open Mutex","text":"<pre><code>#include&lt;iostream&gt;\n#include&lt;windows.h&gt;\nusing namespace std;\n\nint main()\n{\n  HANDLE hMutex = NULL;\n  cout&lt;&lt;\"Open Mutex Fun\"&lt;&lt;endl;\n  hMutex = OpenMutex(MUTEX_ALL_ACCESS,FALSE,L\"MyMutex\");\n\n  if(hMutex = NULL)\n  {\n    cerr&lt;&lt;\"Mutex Opened Failed : \"&lt;&lt;GetLastError()&lt;&lt;endl;\n    system(\"PAUSE\");\n    return 0;\n  }\n\n  cout&lt;&lt;\"Mutex Open Success\"&lt;&lt;endl;\n  CloseHandle(hMutex);\n  system(\"PAUSE\");\n  return 0;\n}\n</code></pre>"}]}